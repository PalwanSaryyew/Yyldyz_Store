generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  tgId        String       @id @unique
  onlineSatus Boolean      @default(false)
  order       Order[]
  summUpdate  SummUpdate[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [id])
  product         Product         @relation(fields: [productId], references: [id])
  payment         PaymentMethod
  receiver        String
  quantity        Int?            @default(0)
  total           Float?            @default(0)
  admin           Admin?          @relation(fields: [courierid], references: [tgId])
  status          OrderStatus
  tonTransaction  TonTransaction?
  userId          String
  productId       Int
  courierid       String?
  mssgIds         Int[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  productAmountId Int?
}

model Product {
  id             Int           @id @default(autoincrement())
  name           ProductType
  title          String?
  amount         Int?
  duration       String?
  picture        String?
  requirementsId Int?
  priceBuy       Float
  priceTMT       Float
  priceUSDT      Float
  chatRequired   Boolean       @default(false)
  details        Details[]
  min            Int           @default(0)
  max            Int           @default(0)
  pricingTiers   Json          @default("[]")
  requirements   Requirements? @relation(fields: [requirementsId], references: [id])
  pictures       String[]
  description    String?
  order          Order[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Requirements {
  id        Int       @id @default(autoincrement())
  asking    String
  expecting String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Details {
  id              Int          @id @default(autoincrement())
  titleId         Int?
  detail          Detail[]
  title           DetailTitle? @relation(fields: [titleId], references: [id])
  product         Product[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  productAmountId Int?
}

model Detail {
  id        Int       @id @default(autoincrement())
  text      String
  image     String
  belongs   Details[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DetailTitle {
  id        Int       @id @default(autoincrement())
  text      String
  image     String?
  belongs   Details[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SummUpdate {
  id        Int           @id @default(autoincrement())
  sum       Float
  currency  PaymentMethod
  admin     Admin         @relation(fields: [cashierid], references: [tgId])
  user      User          @relation(fields: [clientid], references: [id])
  cashierid String
  clientid  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Transfer {
  id         Int           @id @default(autoincrement())
  amount     Float
  currency   PaymentMethod
  sender     User          @relation("SentTransfers", fields: [senderid], references: [id])
  reciever   User          @relation("ReceivedTransfers", fields: [recieverid], references: [id])
  senderid   String
  recieverid String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model TonTransaction {
  id        String   @id @default(cuid())
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String       @id
  walNum     String       @unique
  sumTmt     Float        @default(0)
  sumUsdt    Float        @default(0)
  order      Order[]
  summUpdate SummUpdate[]
  transfers  Transfer[]   @relation("SentTransfers")
  deposits   Transfer[]   @relation("ReceivedTransfers")
  role       UserRole     @default(client)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum OrderStatus {
  pending
  accepted
  paid
  delivering
  completed
  cancelled
  expired
}

enum PaymentMethod {
  USDT
  TON
  TMT
}

enum ProductType {
  jtn
  star
  tgprem
  uc
  exit
  pubg
  trgt
  psp
  steam
  royale
  gpt
  lis
  gplay
  apple
  belet
  alem
  clash
  bc
  brawl
}

enum UserRole {
  client
  admin
}
