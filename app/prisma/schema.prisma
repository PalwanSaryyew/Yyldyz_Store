generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  tgId        String       @id @unique
  onlineSatus Boolean      @default(false)
  order       Order[]
  summUpdate  SummUpdate[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  payment        PaymentMethod
  receiver       String
  admin          Admin?          @relation(fields: [courierid], references: [tgId])
  status         OrderStatus
  tonTransaction TonTransaction?
  userId         String
  productId      Int
  courierid      String?
  mssgIds        Int[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Product {
  id             Int           @id @default(autoincrement())
  name           ProductType
  title          String?
  amount         Int?
  duration       String?
  details        Details[]
  requirements   Requirements? @relation(fields: [requirementsId], references: [id])
  chatRequired   Boolean       @default(false)
  priceBuy       Float
  priceTMT       Float
  priceUSDT      Float
  picture        String?
  pictures       String[]
  description    String?
  order          Order[]
  requirementsId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Requirements {
  id        Int       @id @default(autoincrement())
  asking    String
  expecting String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Details {
  id        Int       @id @default(autoincrement())
  title     String
  detail    Detail[]
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Detail {
  id        Int       @id @default(autoincrement())
  text      String
  image     String
  belongs   Details[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SummUpdate {
  id        Int           @id @default(autoincrement())
  sum       Float
  currency  PaymentMethod
  admin     Admin         @relation(fields: [cashierid], references: [tgId])
  user      User          @relation(fields: [clientid], references: [id])
  cashierid String
  clientid  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model TonTransaction {
  id        String   @id @default(cuid())
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String       @id
  walNum     String       @unique
  sumTmt     Float        @default(0)
  sumUsdt    Float        @default(0)
  order      Order[]
  summUpdate SummUpdate[]
  role       UserRole     @default(client)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum OrderStatus {
  pending
  accepted
  paid
  delivering
  completed
  cancelled
  expired
}

enum PaymentMethod {
  USDT
  TON
  TMT
}

enum ProductType {
  jtn
  star
  tgprem
  uc
  exit
  pubg
  trgt
  psp
  steam
  royale
}

enum UserRole {
  client
  admin
}
